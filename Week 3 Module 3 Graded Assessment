<Git operations>
1. You now need to create a local copy of this remote repository on your machine. We'll do this by cloning the repository. The syntax for this is:
git clone [URL]

2. Next, go to your linux-instance terminal and replace [URL] from the above syntax with the link you copied. The command should now look similar to:
git clone https://github.com/[username]/[git-repo].git

3. This creates a directory with the same name as your repository, initializes a .git directory inside it, pulls down all the data for that repository, and creates a working copy of the latest version.
You can now list the files using the ls command and find your new repository. Move into your repository using cd command. There, you'll see the project files, which are ready to be worked on or used.
cd directory_name

4. Replace the directory_name with your repository's name that you just initialized.
If you want to clone the repository into another directory of your choice, you can do that by passing the name of the directory. This automatically creates a new directory with the specified name and initializes the repository inside it.
Syntax:
git clone [URL] directory_name

<Configure Git>
1. Git uses a username to associate commits with an identity. It does this by using the git config command. Set Git username with the following command:
git config --global user.name "Name"

2. Replace Name with your name. Any future commits you push to GitHub from the command line will now be represented by this name. You can use git config to even change the name associated with your Git commits. This will only affect future commits and won't change the name used for past commits.
Let's set your email address to associate them with your Git commits.
git config --global user.email "user@example.com"

3. Replace user@example.com with your email-id. Any future commits you now push to GitHub will be associated with this email address. You can also use git config to even change the user email associated with your Git commits.

<Edit the file and add it to the repository>
1. Now, edit the README file by using nano editor:
nano README.md

2. Add any text within the file, or you can use the following text:
I am editing the README file. Adding some more details about the project description.

3. Save the file by pressing Ctrl-o, Enter key, and Ctrl-x.

4. We can check the status using the following command:
git status

5. The git status command shows the different states of files in your working directory and staging area, like files that are modified but unstaged and files that are staged but not yet committed.

6. Now, let's add the file to the staging area using the following command:
git add README.md

7. Use the git add command to add content from the working directory into the staging area for the next commit. When the git commit command is run, it looks at this staging area. So you can use git add to craft what you'd like your next commit snapshot to look like.
Let's now commit the changes. A Git commit is like "saving" your work.

8. Commit the changes using the following command:
git commit

9. This now opens an editor that asks you to type a commit message. Every commit has an associated commit message. A commit message is a log message from the user describing the changes.
Enter the commit message of your choice or you can use the following text:
I am editing the README file.

10. Now, push the committed changes from your local repository to a remote repository on the master branch by using:
git push origin master

11. Next, enter your Github username/email ID and password to prompt the associated remote repository to push the changes.

<Create a new file and commit it to the repository>
1. You now need to create a new file example.py on the local git repository in the working directory. To do this, use the following command:
nano example.py

2. Add the following Python script to the example.py file:
def git_opeation():
 print("I am adding example.py file to the remote repository.")
git_opeation()

3. Save the file by pressing Ctrl-o, Enter key, and Ctrl-x.

4. Now, repeat the same procedure by adding a file to the staging area for next commit:
git add example.py

5. Commit the changes:
git commit

6. Enter a commit message and save it by pressing Ctrl-o and the Enter key. To exit click Ctrl-x.
We will push these changes later in the lab.

7. Click Check my progress to verify the objective.
Create a new file and commit it to the repository

<Add an empty file to the repository through web UI>
1.Now, let's create an empty file on the remote repository using the Github website.
Go to your repository on the Github website and click on the Add file button, then click on Create new file. This will open a new page.
create-file.png

2. Enter the file's name in the box beside your repository's name. Leave the contents of the file empty.
Scroll down and enter a commit message in the first box under Commit new file section.
Leave the rest on its default value and click the Commit new file button.
You've successfully committed a new file through the website.
Now, let's push the changes made on the local repository that weren't pushed. Switch back to your terminal and enter the following command:
git push origin master

3. Let's now pull the current snapshot/commit in the remote repository to the local repository:
git pull origin master

4. This opens an editor that asks you to enter a commit message for the merge operation (remote repository to local repository).
You can simply accept the default message or type your own message. 

5. To continue, save the file by pressing Ctrl-o, Enter key, and Ctrl-x.

6. The git pull command is used to fetch and download content from a remote repository and update the local repository to match that content.
Now try pushing the changes again.
