<Forking and detect function behavior>
1. For this exercise, you need to fork an existing repository: google/it-cert-automation-practice.

Open Github. If you don't already have a Github account, create one by entering a username, email, and password. If you already have a Github account proceed to the next step.
Log in to your account from the Github login page.
A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.

Forking a repository is a simple two-step process. We've created a repository for you to practice with!

2. On GitHub, navigate to the google/it-cert-automation-practice repository.
In the top-right corner of the page, click Fork.


3. First, clone the repository using the following command:
git clone https://github.com/[git-username]/it-cert-automation-practice.git

4. Go to the it-cert-automation-practice directory using the following command:
cd ~/it-cert-automation-practice

5. First, verify that you have already setup a remote for the upstream repository, and an origin.Type the following command and press Enter. You'll see the current configured remote repository for your fork.
git remote -v


6. In terms of source control, you're "downstream" when you copy (clone, checkout, etc) from a repository. Information is flowed "downstream" to you.
When you make changes, you usually want to send them back "upstream" so they make it into that repository so that everyone pulling from the same source is working with all the same changes. This is mostly a social issue of how everyone can coordinate their work rather than a technical requirement of source control. You want to get your changes into the main project so you're not tracking divergent lines of development.

7. Setting the upstream for a fork you have created using the following command:
git remote add upstream https://github.com/[git-username]/it-cert-automation-practice.git

8. To verify the new upstream repository you've specified for your fork, type git remote -v again. You should see the URL for your fork as origin, and the URL for the original repository as upstream.
git remote -v

<Configure Git>
1. Git uses a username to associate commits with an identity. It does this by using the git config command. Set the Git username with the following command:
git config --global user.name "Name"

2. Replace Name with your name. Any future commits you push to GitHub from the command line will now be represented by this name. You can even use git config to change the name associated with your Git commits. This will only affect future commits and won't change the name used for past commits.
Let's set your email address to associate them with your Git commits.
git config --global user.email "user@example.com"

3. Replace user@example.com with your email-id. Any future commits you now push to GitHub will be associated with this email address. You can also use git config to change the user email associated with your Git commits.
<Fix the script>

4. In this section we are going to fix an issue that has been filed. Navigate to the issue, and have a look at it.

5. Branches allow you to add new features or test out ideas without putting your main project at risk. In order to add new changes into the repo directory it-cert-automation-practice/Course3/Lab4/, create a new branch named improve-username-behavior in your forked repository using the following command:
git branch improve-username-behavior

6. Go to the improve-username-behavior branch from the master branch.
git checkout improve-username-behavior

7. Now, navigate to the working directory Lab4/.
cd ~/it-cert-automation-practice/Course3/Lab4

8. List the files in directory Lab4.
ls

9. Now, open the validations.py script.
cat validations.py

10. Now, add the following lines of code at the end of the script:
print(validate_user("blue.kale", 3)) # True
print(validate_user(".blue.kale", 3)) # Currently True, should be False
print(validate_user("red_quinoa", 4)) # True
print(validate_user("_red_quinoa", 4)) # Currently True, should be False

11. Once you've finished writing this script, save the file by pressing Ctrl-o, the Enter key, and Ctrl-x.

12. Now, run the validations.py on the python3 interpreter.
python3 validations.py

13. Here, as we see the output, it function returns true even if the username doesnot start with an letter. Here we need to change the check of the first character as only letters are allowed in the first character of the username.
Continue by opening validations.py in the nano editor using the following command:
nano validations.py

14. There are lots of ways to fix the code; ultimately, you'll want to add additional conditional checks to validate the first character doesn't start with either of the forbidden characters. You can choose whichever way you'd like to implement this.

15.Once you've finished writing this script, save the file by pressing Ctrl-o, the Enter key, and Ctrl-x.

16. Now, run the validations.py.
python3 validations.py

Now, you've fixed the function behavior!

<Commit the changes>
1. Once the issue is fixed and verified, create a new commit by adding the file to the staging area. You can check the status using the following command:
git status

2.  git status command shows the different states of the files in your working directory and staging area, like files that are modified but unstaged and files that are staged but not yet committed.
You can now see that the validations.py has been modified.

3. , let's add the file to the staging area using the following command:
git add validations.py

4.  the git add command to add content from the working directory into the staging area for the next commit.
git status

5. Let's now commit the changes. A git commit is like saving your work.

6. Commit the changes using the following command:
git commit

7. This now opens up an editor that asks you to type a commit message. Every commit has an associated commit message, which is a log message from the user describing the changes.
Enter a commit message of your choice and append a line: "Closes: #1" at the beginning to indicate that you're closing the issue. Adding this keyword has an additional effect when using Github to manage your repos, which will automatically close the issue for you (for more information, please see the documentation here).
Closes: #1
Updated validations.py python script.
Fixed the behavior of validate_user function in validations.py.

8. Once you've entered the commit message, save it by pressing Ctrl-o and the Enter key. To exit, click Ctrl-x.

<Push changes>
1. You forked a repository and made changes to the fork. Now you can ask that the upstream repository accept your changes by creating a pull request. Now, let's push the changes.
git push origin improve-username-behavior
